Legenda -
  * --------###-------- folder s nazvom "###"
  * bez odsadenia (napr. Create) je názov file-u
  * prvé odsadenie je názov funkcie
  * vnútri {} je popis toho čo sa deje vnútri (ak je niečo špecifické)
  * "att:" atribúty funkcie

--------USER--------
Create - 
  create(att: name, hashedPassword) 
  {
    books for sale, invoices = empty list

    return user
  }

Read - 
  unique(att: id) 
  {
    return user & Book[] (not deleted)
  }

  forLogin(att: name (should be email!!!), hashedPassword)
  {
    return user
  }

--------CATEGORY--------
Create - seeding
  create(att: name)
  {
    books = empty list

    return category
  }

Read -
  specificName(att: name)
  {
    findUnique(name)

    return category & Book[] (not deleted books)
  }
  
  all(att: void) // without any filter --------- not sure if we need this (prob. nope)
  {
    all categories that we have

    return categories
  }

  specificFilter(att: name[]) // only by names
  {
    get all categories by filter

    return categories & Book[] (not deleted books)
  }

--------BOOK--------
Create -
  create(att: name, author, price, publicationYear, Language, CategoryFK, photoUrl?, description?)
  {
    return book
  }

Delete -
  delete(att: (id) | (name, author, publicationYear))
  {
    delete if not deletedAt 

    return book
  }

Read - all deletedAt === null
  specificSearchFilter(att: author | name)
  {
    return book[]
  }

  specificCategory(att: CategoryFK) 
  {
    return book[] & Category where book.CategoryFK == CategoryFK
  }

  specificInvoice(att: InvoiceFK)
  {
    return book[] & Invoice (invoice has to be unique)
  }

   //        \\
  //if we want\\
 //            \\
  specificLanguage(att: language[])
  {
    return book[]
  }

Update -
  update(att: description? | photoUrl? | price? | name? | author?) // maybe to smaller parts - every update in new function
  {
    return book
  }

--------INVOICE--------
type UserInfo = {
  name: string,
  surname: string,
  email: string,
  phoneNumber: string (good format! prob. some regex)
}

type Address = {
  street: string,
  city: string,
  zipcode: string,
  country: string,
}

Create - 
  create(att: userId, bookId[], amount, UserInfo, Address)
  {
    return invoice & User
  }

Read -
  specificByUser(att: userId)
  {
    return invoice[] & User
  }

